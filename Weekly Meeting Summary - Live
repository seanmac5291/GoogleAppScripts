function createNextSevenDaysSummary() {
  try {
    Logger.log('Starting createNextSevenDaysSummary function');

    // Define the time range for the next 7 days
    const now = new Date();
    const sevenDaysFromNow = new Date();
    sevenDaysFromNow.setDate(now.getDate() + 7); // Add 7 days to the current date
    Logger.log('Current date: ' + now);
    Logger.log('Date 7 days from now: ' + sevenDaysFromNow);

    // Get the user's primary calendar
    const calendar = CalendarApp.getDefaultCalendar();
    Logger.log('Successfully accessed the default calendar.');
    const events = calendar.getEvents(now, sevenDaysFromNow);
    Logger.log('Number of events found in the next 7 days: ' + events.length);

    // Get the user's email address
    const userEmail = Session.getEffectiveUser().getEmail();
    Logger.log('User email: ' + userEmail);

    // Open the existing Google Doc by its ID
    const docId = '14ZC3jrRXGCK0hfgBiN92fItkk8B1FDhCKgDLwWYBYUQ'; // Updated document ID
    Logger.log('Attempting to open document with ID: ' + docId);
    const doc = DocumentApp.openById(docId);
    const body = doc.getBody();
    Logger.log('Successfully opened the document. Current number of elements in body: ' + body.getNumChildren());

    // Find the first Heading 1 element
    let insertLocation = 0;
    for (let i = 0; i < body.getNumChildren(); i++) {
      const element = body.getChild(i);
      if (element.getType() === DocumentApp.ElementType.PARAGRAPH && element.getHeading() === DocumentApp.ParagraphHeading.HEADING1) {
        insertLocation = i + 1; // Insert after this element
        Logger.log('Found Heading 1 at index: ' + i + '. Inserting new summary after this.');
        break;
      }
    }

    // If no Heading 1 is found, insert at the beginning (you might want to adjust this behavior)
    if (insertLocation === 0) {
      Logger.log('No Heading 1 found. Inserting new summary at the beginning of the body.');
    }

    // Create an array to hold the new content to be inserted
    const newContent = [];

    // Add the main title for the week
    const weekTitle = `Week of ${now.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}`;
    // Store the heading style as a string to avoid reference issues
    newContent.push({text: weekTitle, style: 'HEADING2'});
    Logger.log('Created week title: ' + weekTitle);

    newContent.push({text: '________________________________________________________________________________\n', style: null});

    if (events.length === 0) {
      newContent.push({text: 'No events found for the next 7 days.\n', style: null});
      Logger.log('No events found, created a message.');
    } else {
      // Group events by date
      const eventsByDate = {};
      events.forEach(event => {
        const title = event.getTitle() || ''; // Handle blank titles
        const startTime = event.getStartTime();
        const eventDate = startTime.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }); // Format date string for grouping
        const attendees = event.getGuestList().map(guest => guest.getEmail());
        const creators = event.getCreators(); // Returns an array of emails
        // Use the first creator's email if available, otherwise handle appropriately
        const organizerEmail = creators.length > 0 ? creators[0] : null; 

        Logger.log('Processing event: ' + title + ' on ' + eventDate + ' by ' + (organizerEmail || 'Unknown Organizer'));

        // Exclude events with specific titles or patterns
        const excludedTitles = [
          'home', 'ivy', 'annabelle', 'azure weekly', 'wrap up/follow ups', 'update current q forecast',
          'forecast', 'pubsec and fos office hours', 'slg weekly', 'next 2 quarters - update fc',
          'stand-up', 'all hands', 'internal', 'comm of ma - github bi-weekly office hours',
          'ask before booking', 'north carolina team', 'pa monthly team meeting', 'weekly prep',
          'albert', 'wes'
        ];

        // Check if the title matches any excluded patterns
        if (excludedTitles.some(excluded => title.toLowerCase().includes(excluded)) || title.trim() === '') {
          Logger.log('Event "' + title + '" excluded based on title.');
          return; // Skip this event
        }

        // Filter out events with "ROB" in the title
        if (title.toUpperCase().includes('ROB')) {
          Logger.log('Event "' + title + '" excluded because it contains "ROB".');
          return; // Skip this event
        }

        // Filter out meetings set by the user for themselves
        if (attendees.length === 1 && attendees[0] === userEmail) {
          Logger.log(`Event "${title}" excluded as it's a single-attendee meeting created by the user.`); // Use template literal
          return; // Skip this event
        }

        // Filter out meetings sent from @microsoft.com with "weekly" or "monthly" in the title
        // and without any attendee with a .gov email address
        if (
          organizerEmail && // Check if organizerEmail is not null
          organizerEmail.toLowerCase().endsWith('@microsoft.com') &&
          (title.toLowerCase().includes('weekly') || title.toLowerCase().includes('monthly')) &&
          !attendees.some(email => email.endsWith('.gov'))
        ) {
          Logger.log('Event "' + title + '" excluded based on organizer and attendees.');
          return; // Skip this event
        }

        // Add the event to the corresponding date group
        if (!eventsByDate[eventDate]) {
          eventsByDate[eventDate] = [];
          Logger.log('Created new date group: ' + eventDate);
        }
        
        // Only store necessary info
        eventsByDate[eventDate].push({ 
          title, 
          startTime
        });
        
        Logger.log('Added event "' + title + '" to date group: ' + eventDate);
      });

      // Sort dates based on actual Date objects, not the formatted strings
      const sortedDates = Object.keys(eventsByDate).sort((a, b) => {
        // Convert formatted date string back to Date object for sorting
        return new Date(a) - new Date(b);
      });
      Logger.log('Sorted dates: ' + sortedDates.join(', '));
      
      sortedDates.forEach(date => {
        // Insert the date as a bold title for the section
        newContent.push({text: `${date}`, style: 'BOLD'}); // Use the formatted date string directly
        Logger.log('Created date heading: ' + date);

        newContent.push({text: '----------------------------------------', style: null});
        eventsByDate[date].forEach(event => {
          newContent.push({text: `Account/Time: ${event.title} / ${formatTime(event.startTime)}`, style: null});
          newContent.push({text: `GH Attendees: `, style: null}); // Leave blank
          newContent.push({text: `Topics: `, style: null}); // Leave blank
          newContent.push({text: `Outcome: `, style: null}); // Leave blank
          newContent.push({text: '\n', style: null}); // Add a blank line between events
        });
      });
    }

    newContent.push({text: '________________________________________________________________________________\n\n', style: null});

    // Insert the new content after the first Heading 1
    if (newContent.length > 0) {
      // Insert in reverse order to maintain the correct sequence
      for (let i = newContent.length - 1; i >= 0; i--) {
        const item = newContent[i];
        let para;
        
        if (insertLocation >= body.getNumChildren()) {
          para = body.appendParagraph(item.text);
        } else {
          para = body.insertParagraph(insertLocation, item.text);
        }
        
        if (item.style === 'BOLD') {
          para.setBold(true);
        } else if (item.style === 'HEADING2') {
          para.setHeading(DocumentApp.ParagraphHeading.HEADING2);
        }
        
        // Do not increment insertLocation here, as insertParagraph shifts elements
      }
      Logger.log('New weekly summary inserted after the first Heading 1.');
    }

    // Save the document
    doc.saveAndClose();
    Logger.log(`Document updated successfully: ${doc.getUrl()}`);
  } catch (error) {
    Logger.log(`Error encountered: ${error.message}`);
    Logger.log(`Stack trace: ${error.stack}`); // This can provide more detailed error information
  }
  Logger.log('Function createNextSevenDaysSummary finished.');
}

// Helper function to format time as "h:mm a"
function formatTime(date) {
  const options = { hour: 'numeric', minute: '2-digit', hour12: true };
  return date.toLocaleTimeString('en-US', options).toLowerCase();
}

// Helper function to clean the description by removing noise but keeping email addresses
function cleanDescription(description) {
  // Remove HTML tags
  description = description.replace(/<[^>]*>/g, '');
  // Remove hyperlinks
  description = description.replace(/https?:\/\/[^\s]+/g, '');
  const noisePatterns = [
    /Microsoft Teams.*$/gim, /Meeting ID:.*$/gim, /Passcode:.*$/gim, /\(\d{3}\) \d{3}-\d{4}.*$/gim,
    /For organizers:.*$/gim, /Find a local number.*$/gim, /Reset dial-in PIN.*$/gim,
    /Join on your computer or mobile app.*$/gim, /Click here to join the meeting.*$/gim,
    /Or call in \(audio only\).*$/gim, /United States.*$/gim, /Dial in by phone.*$/gim,
    /\+\d{1,3}[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,9}(#.*)?/g, /Phone conference ID:.*$/gim,
    /Join the meeting now.*$/gim, /________________________________________________________________________________/g,
    /Thank you.*$/gim, /Regards.*$/gim, /Best.*$/gim, /Sincerely.*$/gim, /Cheers.*$/gim,
    /is inviting you to a scheduled Zoom meeting.*$/gim, /Join Zoom Meeting.*$/gim,
    /One tap mobile.*$/gim, /Dial by your location.*$/gim, /â€¢.*$/gim
  ];
  noisePatterns.forEach(pattern => { description = description.replace(pattern, ''); });
  description = description.replace(/\n\s*\n/g, '\n').trim();
  return description;
}