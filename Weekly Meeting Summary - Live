function createNextSevenDaysSummary() {
  try {
    Logger.log('Starting createNextSevenDaysSummary function');

    // Define the time range for the next 7 days
    const now = new Date();
    const sevenDaysFromNow = new Date();
    sevenDaysFromNow.setDate(now.getDate() + 7); // Add 7 days to the current date
    Logger.log('Current date: ' + now);
    Logger.log('Date 7 days from now: ' + sevenDaysFromNow);

    // Get the user's primary calendar
    const calendar = CalendarApp.getDefaultCalendar();
    Logger.log('Successfully accessed the default calendar.');
    const events = calendar.getEvents(now, sevenDaysFromNow);
    Logger.log('Number of events found in the next 7 days: ' + events.length);

    // Get the user's email address
    const userEmail = Session.getEffectiveUser().getEmail();
    Logger.log('User email: ' + userEmail);

    // GitHub configuration
    const githubToken = PropertiesService.getScriptProperties().getProperty('GITHUB_TOKEN');
    const owner = 'github';
    const repo = 'SLGEast';
    const path = 'WeeklyMeetingSummary.md';
    Logger.log('GitHub configuration loaded.');

    // Generate markdown content for the weekly summary
    let markdownContent = '';

    // Add the main title for the week
    const weekTitle = `## Week of ${now.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}`;
    markdownContent += weekTitle + '\n\n';
    Logger.log('Created week title: ' + weekTitle);

    markdownContent += '---\n\n';

    if (events.length === 0) {
      markdownContent += 'No events found for the next 7 days.\n\n';
      Logger.log('No events found, created a message.');
    } else {
      // Group events by date
      const eventsByDate = {};
      events.forEach(event => {
        const title = event.getTitle() || ''; // Handle blank titles
        const startTime = event.getStartTime();
        const eventDate = startTime.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }); // Format date string for grouping
        const attendees = event.getGuestList().map(guest => guest.getEmail());
        const creators = event.getCreators(); // Returns an array of emails
        // Use the first creator's email if available, otherwise handle appropriately
        const organizerEmail = creators.length > 0 ? creators[0] : null; 

        Logger.log('Processing event: ' + title + ' on ' + eventDate + ' by ' + (organizerEmail || 'Unknown Organizer'));

        // Exclude events with specific titles or patterns
        const excludedTitles = [
          'home', 'ivy', 'annabelle', 'azure weekly', 'wrap up/follow ups', 'update current q forecast',
          'forecast', 'pubsec and fos office hours', 'slg weekly', 'next 2 quarters - update fc',
          'stand-up', 'all hands', 'internal', 'comm of ma - github bi-weekly office hours',
          'ask before booking', 'north carolina team', 'pa monthly team meeting', 'weekly prep',
          'albert', 'wes'
        ];

        // Check if the title matches any excluded patterns
        if (excludedTitles.some(excluded => title.toLowerCase().includes(excluded)) || title.trim() === '') {
          Logger.log('Event "' + title + '" excluded based on title.');
          return; // Skip this event
        }

        // Filter out events with "ROB" in the title
        if (title.toUpperCase().includes('ROB')) {
          Logger.log('Event "' + title + '" excluded because it contains "ROB".');
          return; // Skip this event
        }

        // Filter out meetings set by the user for themselves
        if (attendees.length === 1 && attendees[0] === userEmail) {
          Logger.log(`Event "${title}" excluded as it's a single-attendee meeting created by the user.`); // Use template literal
          return; // Skip this event
        }

        // Filter out meetings sent from @microsoft.com with "weekly" or "monthly" in the title
        // and without any attendee with a .gov email address
        if (
          organizerEmail && // Check if organizerEmail is not null
          organizerEmail.toLowerCase().endsWith('@microsoft.com') &&
          (title.toLowerCase().includes('weekly') || title.toLowerCase().includes('monthly')) &&
          !attendees.some(email => email.endsWith('.gov'))
        ) {
          Logger.log('Event "' + title + '" excluded based on organizer and attendees.');
          return; // Skip this event
        }

        // Add the event to the corresponding date group
        if (!eventsByDate[eventDate]) {
          eventsByDate[eventDate] = [];
          Logger.log('Created new date group: ' + eventDate);
        }
        
        // Only store necessary info
        eventsByDate[eventDate].push({ 
          title, 
          startTime
        });
        
        Logger.log('Added event "' + title + '" to date group: ' + eventDate);
      });

      // Sort dates based on actual Date objects, not the formatted strings
      const sortedDates = Object.keys(eventsByDate).sort((a, b) => {
        // Convert formatted date string back to Date object for sorting
        return new Date(a) - new Date(b);
      });
      Logger.log('Sorted dates: ' + sortedDates.join(', '));
      
      sortedDates.forEach(date => {
        // Add the date as a heading (H3) for the section
        markdownContent += `### ${date}\n\n`;
        Logger.log('Created date heading: ' + date);

        markdownContent += '---\n\n';
        
        eventsByDate[date].forEach(event => {
          markdownContent += `**Account/Time:** ${event.title} / ${formatTime(event.startTime)}\n\n`;
          markdownContent += `**GH Attendees:** \n\n`; // Leave blank
          markdownContent += `**Topics:** \n\n`; // Leave blank
          markdownContent += `**Outcome:** \n\n`; // Leave blank
          markdownContent += '---\n\n'; // Add a separator between events
        });
      });
    }

    // Update the GitHub repo with the new content
    updateGitHubFile(owner, repo, path, markdownContent, githubToken);
    Logger.log('Weekly summary pushed to GitHub successfully.');
    
  } catch (error) {
    Logger.log(`Error encountered: ${error.message}`);
    Logger.log(`Stack trace: ${error.stack}`); // This can provide more detailed error information
  }
  Logger.log('Function createNextSevenDaysSummary finished.');
}

/**
 * Updates a file in a GitHub repository.
 * If the file exists, it will be updated by prepending the new content to the existing content.
 * If the file does not exist, it will be created.
 */
function updateGitHubFile(owner, repo, path, newContent, token) {
  // GitHub API endpoints
  const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${path}`;
  
  // First, check if the file exists and get its current content and SHA
  let fileExists = false;
  let currentContent = '';
  let fileSha = '';
  
  try {
    const checkResponse = UrlFetchApp.fetch(apiUrl, {
      method: 'GET',
      headers: {
        'Authorization': 'token ' + token,
        'Accept': 'application/vnd.github.v3+json'
      },
      muteHttpExceptions: true
    });
    
    const responseCode = checkResponse.getResponseCode();
    Logger.log(`GitHub API GET response code: ${responseCode}`);
    
    if (responseCode === 200) {
      fileExists = true;
      const fileData = JSON.parse(checkResponse.getContentText());
      fileSha = fileData.sha;
      
      // Decode the base64 content
      const encodedContent = fileData.content;
      currentContent = Utilities.newBlob(Utilities.base64Decode(encodedContent)).getDataAsString();
      Logger.log('Existing file found. Current content length: ' + currentContent.length);
    } else if (responseCode === 403) {
      // Handle 403 errors which might be related to SAML enforcement
      const responseText = checkResponse.getContentText();
      if (responseText.includes("SAML enforcement")) {
        throw new Error("GitHub SAML enforcement detected. You need to authorize your Personal Access Token for the GitHub organization. Go to GitHub Settings → Developer settings → Personal access tokens → Find your token → Scroll to 'Organization access' → Click 'Authorize' for the github organization.");
      } else {
        throw new Error(`GitHub API returned 403 Forbidden: ${responseText}`);
      }
    } else if (responseCode === 404) {
      Logger.log('File does not exist yet. Will create a new file.');
      fileExists = false;
    } else {
      throw new Error(`GitHub API returned unexpected status code: ${responseCode}. Response: ${checkResponse.getContentText()}`);
    }
  } catch (e) {
    if (e.message.includes("SAML enforcement")) {
      // Rethrow SAML-specific errors to preserve the helpful message
      throw e;
    } else {
      Logger.log('Error checking file: ' + e.message);
      fileExists = false;
    }
  }
  
  try {
    // Add a separator between new and existing content if the file exists
    let combinedContent;
    if (fileExists && currentContent.length > 0) {
      // Insert a page separator between the new content and the existing content
      combinedContent = newContent + "\n\n<!-- PAGE BREAK -->\n\n" + currentContent;
    } else {
      combinedContent = newContent;
    }
    
    // Encode content in base64
    const encodedContent = Utilities.base64Encode(combinedContent);
    
    // Prepare the request payload
    const payload = {
      message: `Update weekly meeting summary for ${new Date().toLocaleDateString()}`,
      content: encodedContent
    };
    
    // If the file exists, include its SHA to update it
    if (fileExists) {
      payload.sha = fileSha;
    }
    
    // Make the request to create/update the file
    const updateResponse = UrlFetchApp.fetch(apiUrl, {
      method: 'PUT',
      headers: {
        'Authorization': 'token ' + token,
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.github.v3+json'
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    
    const responseCode = updateResponse.getResponseCode();
    Logger.log(`GitHub API PUT response code: ${responseCode}`);
    
    if (responseCode === 200 || responseCode === 201) {
      Logger.log('File successfully ' + (fileExists ? 'updated' : 'created') + ' in GitHub repository.');
    } else if (responseCode === 403) {
      const responseText = updateResponse.getContentText();
      if (responseText.includes("SAML enforcement")) {
        throw new Error("GitHub SAML enforcement detected. You need to authorize your Personal Access Token for the GitHub organization. Go to GitHub Settings → Developer settings → Personal access tokens → Find your token → Scroll to 'Organization access' → Click 'Authorize' for the github organization.");
      } else {
        throw new Error(`GitHub API returned 403 Forbidden: ${responseText}`);
      }
    } else {
      throw new Error(`Error updating GitHub file. Response code: ${responseCode}. Response: ${updateResponse.getContentText()}`);
    }
  } catch (e) {
    Logger.log(`Error in GitHub API operation: ${e.message}`);
    throw e; // Rethrow to show error in main function
  }
}

// Helper function to format time as "h:mm a"
function formatTime(date) {
  const options = { hour: 'numeric', minute: '2-digit', hour12: true };
  return date.toLocaleTimeString('en-US', options).toLowerCase();
}

// Helper function to clean the description by removing noise but keeping email addresses
function cleanDescription(description) {
  // Remove HTML tags
  description = description.replace(/<[^>]*>/g, '');
  // Remove hyperlinks
  description = description.replace(/https?:\/\/[^\s]+/g, '');
  const noisePatterns = [
    /Microsoft Teams.*$/gim, /Meeting ID:.*$/gim, /Passcode:.*$/gim, /\(\d{3}\) \d{3}-\d{4}.*$/gim,
    /For organizers:.*$/gim, /Find a local number.*$/gim, /Reset dial-in PIN.*$/gim,
    /Join on your computer or mobile app.*$/gim, /Click here to join the meeting.*$/gim,
    /Or call in \(audio only\).*$/gim, /United States.*$/gim, /Dial in by phone.*$/gim,
    /\+\d{1,3}[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,9}(#.*)?/g, /Phone conference ID:.*$/gim,
    /Join the meeting now.*$/gim, /________________________________________________________________________________/g,
    /Thank you.*$/gim, /Regards.*$/gim, /Best.*$/gim, /Sincerely.*$/gim, /Cheers.*$/gim,
    /is inviting you to a scheduled Zoom meeting.*$/gim, /Join Zoom Meeting.*$/gim,
    /One tap mobile.*$/gim, /Dial by your location.*$/gim, /•.*$/gim
  ];
  noisePatterns.forEach(pattern => { description = description.replace(pattern, ''); });
  description = description.replace(/\n\s*\n/g, '\n').trim();
  return description;
}
